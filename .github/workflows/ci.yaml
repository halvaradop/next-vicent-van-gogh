name: ci

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  pull_request:
    types: [opened, synchronize, closed]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      - uses: pnpm/action-setup@v4
      - run: pnpm install --frozen-lockfile
      - run: pnpm lint

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      - uses: pnpm/action-setup@v4
      - run: pnpm install --frozen-lockfile
      - run: pnpm build

  deploy-to-development:
    if: github.event.pull_request.merged == true && github.base_ref == 'master'
    runs-on: ubuntu-latest
    needs: build
    environment: development
    steps:
      - run: echo "Deploying to development"

  deploy-to-production:
    if: github.event.pull_request.merged == true && github.base_ref == 'master' && startsWith(github.head_ref, 'release/')
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"

      - uses: pnpm/action-setup@v4
      - name: Install Vercel CLI
        run: pnpm install -g vercel

      - name: Pull Vercel Environment Variables
        run: vercel pull --yes --environment=production --token ${{ secrets.VERCEL_TOKEN }}

      - name: Build Artifact
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Artifact to Vercel
        run: vercel deploy --prebuilt --prod --token ${{ secrets.VERCEL_TOKEN }}
